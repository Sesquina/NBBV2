{"version":3,"file":"react-morphing-modal.cjs.production.min.js","sources":["../src/DOMutils.ts","../src/hooks.ts","../src/classname.ts","../src/Modal.tsx"],"sourcesContent":["let bodyNode: HTMLBodyElement | null;\n\nfunction getBodyNode() {\n  if (!bodyNode) {\n    bodyNode = document.querySelector('body');\n  }\n  return bodyNode as HTMLBodyElement;\n}\n\nfunction computeCoordinateScaleValue(\n  initialCoordinate: number,\n  nodeSize: number,\n  windowCoordinate: number\n) {\n  const intermediateCoordinate =\n    windowCoordinate - initialCoordinate - nodeSize;\n  const maxCoordinate = Math.max(initialCoordinate, intermediateCoordinate);\n  const scaleValue = (maxCoordinate * 2 + nodeSize) / nodeSize;\n\n  return Math.ceil(scaleValue * 10) / 10;\n}\n\nfunction getScaleValues(node: HTMLElement, top: number, left: number) {\n  return {\n    scaleX: computeCoordinateScaleValue(\n      left,\n      node.offsetWidth,\n      window.innerWidth\n    ),\n    scaleY: computeCoordinateScaleValue(\n      top,\n      node.offsetHeight,\n      window.innerHeight\n    ),\n  };\n}\n\nexport const bodyScrolling = {\n  lock() {\n    getBodyNode().style.overflow = 'hidden';\n  },\n  unlock() {\n    getBodyNode().style.removeProperty('overflow');\n  },\n};\n\nexport function getPlaceholderComputedStyle(\n  trigger: HTMLElement,\n  placeholder: HTMLElement\n) {\n  const top = trigger.offsetTop - window.scrollY;\n  const left = trigger.offsetLeft - window.scrollX;\n  const placeholderScale = getScaleValues(placeholder, top, left);\n\n  // ðŸ‘½1.5 to handle circle and rounded border\n  return `\n  top: ${top}px;\n  left: ${left}px;\n  transform: scale(${placeholderScale.scaleX * 1.5},${placeholderScale.scaleY *\n    1.5});\n`;\n}\n\nexport function getBorderRadius(styles: CSSStyleDeclaration): string {\n  const {\n    borderTopLeftRadius,\n    borderTopRightRadius,\n    borderBottomLeftRadius,\n    borderBottomRightRadius,\n  } = styles;\n  return `\n    border-top-left-radius: ${borderTopLeftRadius};\n    border-top-right-radius: ${borderTopRightRadius};\n    border-bottom-left-radius: ${borderBottomLeftRadius};\n    border-bottom-right-radius: ${borderBottomRightRadius};\n  `;\n}\n\nexport function getBackground(styles: CSSStyleDeclaration): string {\n  // work for chrome only. firefox do not return shorthand prop\n  if (styles.background && styles.background.length > 0) {\n    return styles.background;\n  }\n\n  // inline style in ff return none.\n  // I could put styles.backgroundColor here so I don't need to check for none\n  // but I don't want to rely on call order\n  if (\n    styles.backgroundImage &&\n    styles.backgroundImage.length > 0 &&\n    styles.backgroundImage !== 'none'\n  ) {\n    return styles.backgroundImage;\n  }\n\n  if (styles.backgroundColor && styles.backgroundColor.length > 0) {\n    return styles.backgroundColor;\n  }\n\n  return '';\n}\n","import { useRef, useState, useEffect } from 'react';\nimport {\n  getBackground,\n  bodyScrolling,\n  getBorderRadius,\n  getPlaceholderComputedStyle,\n} from './DOMutils';\n\nimport {\n  ModalState,\n  HookOptions,\n  UseModal,\n  ActiveTriggerRef,\n  ModalId,\n  StateValues,\n  TriggerProps,\n  GetTriggerProps,\n  TriggerPropsOptions,\n  OpenModal,\n  CloseModal,\n} from './types';\n\nexport const STATE: ModalState = {\n  IS_CLOSE: 0,\n  IS_IN_PROGRESS: 1,\n  IS_OPEN: 2,\n};\n\nconst noop = () => {};\n\nexport function useModal(hookOptions: HookOptions = {}): UseModal {\n  const placeholderRef = useRef<HTMLDivElement>(null);\n  const activeTriggerRef = useRef<ActiveTriggerRef>({\n    nodeRef: null,\n    options: null,\n  });\n  const [activeModal, setActiveModal] = useState<ModalId>(null);\n  const [state, setState] = useState<StateValues>(STATE.IS_CLOSE);\n  const event = hookOptions.event || 'onClick';\n  const onOpenCallback = hookOptions.onOpen || noop;\n  const onCloseCallback = hookOptions.onClose || noop;\n\n  function handleEscapeKey(e: KeyboardEvent) {\n    const key = e.key || e.keyCode;\n    if (key === 'Escape' || key === 'Esc' || key === 27) close();\n  }\n\n  // maybe throttle later if needed\n  function handleResize() {\n    requestAnimationFrame(updatePlaceholder);\n  }\n\n  function updatePlaceholder() {\n    const trigger = activeTriggerRef.current.nodeRef!.current;\n    if (placeholderRef.current && trigger) {\n      const placeholderStyle = getPlaceholderComputedStyle(\n        trigger,\n        placeholderRef.current\n      );\n      placeholderRef.current.style.cssText += placeholderStyle;\n    }\n  }\n\n  useEffect(() => {\n    if (state !== STATE.IS_CLOSE) {\n      document.addEventListener('keydown', handleEscapeKey);\n      window.addEventListener('resize', handleResize);\n    }\n    return () => {\n      document.removeEventListener('keydown', handleEscapeKey);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [state]);\n\n  const open: OpenModal = (triggerRef, triggerOptions) => {\n    activeTriggerRef.current.nodeRef = triggerRef;\n    if (placeholderRef.current && triggerRef.current) {\n      const placeholder = placeholderRef.current;\n      const trigger = triggerRef.current;\n      const triggerStyles = window.getComputedStyle(trigger);\n      const borderRadius = getBorderRadius(triggerStyles);\n\n      let modalId: ModalId = null;\n      let background = hookOptions.background || getBackground(triggerStyles);\n      let onOpen = onOpenCallback;\n\n      if (\n        typeof triggerOptions === 'number' ||\n        typeof triggerOptions === 'string' ||\n        typeof triggerOptions === 'symbol'\n      ) {\n        modalId = triggerOptions;\n      } else if (\n        typeof triggerOptions === 'object' &&\n        triggerOptions !== null\n      ) {\n        activeTriggerRef.current.options = triggerOptions;\n        modalId = triggerOptions.id || modalId;\n        background = triggerOptions.background || background;\n        onOpen = triggerOptions.onOpen || onOpenCallback;\n      }\n\n      bodyScrolling.lock();\n\n      placeholder.style.cssText = `width: ${trigger.offsetWidth}px; height: ${trigger.offsetHeight}px; background: ${background}; ${borderRadius}`;\n\n      if (modalId) {\n        setActiveModal(modalId);\n      }\n\n      setState(STATE.IS_IN_PROGRESS);\n\n      const placeholderStyle = getPlaceholderComputedStyle(\n        trigger,\n        placeholder\n      );\n      placeholder.style.cssText += placeholderStyle;\n\n      placeholder.addEventListener(\n        'transitionend',\n        () => {\n          onOpen();\n          setState(STATE.IS_OPEN);\n        },\n        { once: true }\n      );\n    }\n  };\n\n  const close: CloseModal = () => {\n    if (placeholderRef.current) {\n      const triggerOptions = activeTriggerRef.current.options;\n      const placeholder = placeholderRef.current;\n      let onClose =\n        triggerOptions && triggerOptions.onClose\n          ? triggerOptions.onClose\n          : onCloseCallback;\n      setState(STATE.IS_IN_PROGRESS);\n\n      bodyScrolling.unlock();\n      placeholder.style.removeProperty('transform');\n      placeholder.style.transform = 'scale(1,1);';\n\n      placeholder.addEventListener(\n        'transitionend',\n        () => {\n          onClose();\n          setState(STATE.IS_CLOSE);\n          setActiveModal(null);\n        },\n        { once: true }\n      );\n    }\n  };\n\n  const getTriggerProps: GetTriggerProps = (\n    options?: ModalId | TriggerPropsOptions\n  ): TriggerProps => {\n    const ref = useRef<any>();\n    return {\n      ref,\n      [typeof options === 'object' && options !== null && options.event\n        ? options.event\n        : event]: open.bind(null, ref, options),\n    };\n  };\n\n  return {\n    open,\n    close,\n    activeModal,\n    getTriggerProps,\n    modalProps: {\n      placeholderRef,\n      state,\n      close,\n    },\n  };\n}\n","export const classname = {\n  container: 'RMM__container',\n  closeButton: 'RMM__close-button',\n  placeholder: 'RMM__placeholder',\n  body: 'RMM__body',\n  noBodyPadding: 'RMM__body--no-padding',\n  get(className: string, isActive: boolean) {\n    return isActive ? `${className} ${className}--is-active` : className;\n  },\n};\n","import React from 'react';\n\nimport { classname as cx } from './classname';\nimport { STATE } from './hooks';\n\nexport interface ModalProps {\n  state: number;\n  placeholderRef: React.MutableRefObject<HTMLDivElement | null>;\n  close: () => void;\n  closeButton?: boolean;\n  padding?: boolean;\n}\n\nconst Modal: React.FC<ModalProps> = ({\n  state,\n  placeholderRef,\n  close,\n  closeButton,\n  children,\n  padding,\n}) => {\n  const bodyPadding = !padding ? ` ${cx.noBodyPadding}` : '';\n  return (\n    <div\n      className={cx.get(\n        cx.container,\n        state === STATE.IS_IN_PROGRESS || state === STATE.IS_OPEN\n      )}\n    >\n      <div className={cx.get(cx.body, STATE.IS_OPEN === state) + bodyPadding}>\n        {children}\n      </div>\n      <div className={cx.placeholder} ref={placeholderRef} />\n      {closeButton && (\n        <div\n          className={cx.get(cx.closeButton, STATE.IS_OPEN === state)}\n          onClick={close}\n        />\n      )}\n    </div>\n  );\n};\n\nModal.defaultProps = {\n  closeButton: true,\n  padding: true,\n};\n\nexport { Modal };\n"],"names":["bodyNode","getBodyNode","document","querySelector","computeCoordinateScaleValue","initialCoordinate","nodeSize","windowCoordinate","maxCoordinate","Math","max","ceil","getPlaceholderComputedStyle","trigger","placeholder","top","offsetTop","window","scrollY","left","offsetLeft","scrollX","placeholderScale","node","scaleX","offsetWidth","innerWidth","scaleY","offsetHeight","innerHeight","getScaleValues","noop","classname","className","isActive","Modal","state","placeholderRef","close","closeButton","children","bodyPadding","padding","React","cx","ref","onClick","defaultProps","hookOptions","useRef","activeTriggerRef","nodeRef","options","useState","activeModal","setActiveModal","setState","event","onOpenCallback","onOpen","onCloseCallback","onClose","handleEscapeKey","e","key","keyCode","handleResize","requestAnimationFrame","updatePlaceholder","current","placeholderStyle","style","cssText","useEffect","addEventListener","removeEventListener","open","triggerRef","triggerOptions","triggerStyles","getComputedStyle","borderRadius","styles","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","modalId","background","length","backgroundImage","backgroundColor","id","overflow","once","removeProperty","transform","getTriggerProps","bind","modalProps"],"mappings":"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"}